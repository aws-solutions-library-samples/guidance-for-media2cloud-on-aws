AWSTemplateFormatVersion: "2010-09-09"

Description: (%%SOLUTION_ID%%) Guidance for Media2Cloud on AWS - this guidance is designed to demonstrate a serverless ingest and analysis framework that can quickly setup a baseline ingest workflow for placing video assets and associated metadata under management control of an AWS customer. Version %%VERSION%%

Mappings:
    Solution:
        Project:
            Id: "%%SOLUTION_ID%%"
            LowerCaseId: "%%SOLUTION_ID_LOWERCASE%%"
            Version: "%%VERSION%%"
            CustomUserAgent: AWSSOLUTION/%%SOLUTION_ID%%/%%VERSION%%
            SolutionName: Media2Cloud on AWS
            AppRegistryApplicationName: Media2CloudOnAws
            ApplicationType: AWS-Solutions
        Template:
            S3Bucket: "%%BUCKET_NAME%%"
            KeyPrefix: "%%KEYPREFIX%%"
            SingleRegion: "%%SINGLE_REGION%%"
        Stack:
            Core: media2cloud-core-stack.template
            Backend: media2cloud-backend-stack.template
            WebApp: media2cloud-webapp-stack.template
            Graph: media2cloud-graph-stack.template
            Shoppable: media2cloud-shoppable-stack.template
            CodeBuild: media2cloud-codebuild-stack.template
    Workflow:
        CustomResources:
            Package: "%%PKG_CUSTOM_RESOURCES%%"
            Name: custom-resources
        ShoppableStack:
            Enable: "%%ENABLE_SHOPPABLE%%"
    AIML:
        Options:
            DefaultMinConfidence: 80
            # store aioptions to proxy bucket
            S3Key: _settings/aioptions.json
    Node:
        Runtime:
            Version: nodejs20.x
    Send:
        AnonymousUsage:
            Data: "Yes"
    Cognito:
        Group:
            Viewer: viewer
            Creator: creator
            Admin: admin
    DockerImage:
        Faiss:
            Repo: "%%FAISS_REPO%%"
            Version: "%%FAISS_VER%%"
        Shoppable:
            Repo: "%%SHOPPABLE_REPO%%"
            Version: "%%SHOPPABLE_VER%%"
        ZeroshotClassifier:
            Repo: "%%ZEROSHOT_CLASSIFIER_REPO%%"
            Version: "%%ZEROSHOT_CLASSIFIER_VER%%"
        ZeroshotObject:
            Repo: "%%ZEROSHOT_OBJECT_REPO%%"
            Version: "%%ZEROSHOT_OBJECT_VER%%"
        FaceApi:
            Repo: "%%FACEAPI_REPO%%"
            Version: "%%FACEAPI_VER%%"
    AnthropicClaude:
        Sonnet:
            Name: Anthropic Claude 3 Sonnet
            ModelId: anthropic.claude-3-sonnet-20240229-v1:0
            ModelVersion: bedrock-2023-05-31
        Haiku:
            Name: Anthropic Claude 3 Haiku
            ModelId: anthropic.claude-3-haiku-20240307-v1:0
            ModelVersion: bedrock-2023-05-31

Parameters:
    # User defined Ingest Bucket
    UserDefinedIngestBucket:
        Type: String
        Description: If you have an existing bucket that you would like to store uploaded contents, specify the bucket name. Otherwise, leave it blank to auto create a new bucket
        Default: ""
    # Elasticsearch
    OpenSearchCluster:
        Type: String
        Description: Configure Amazon OpenSearch cluster size
        Default: Development and Testing (t3.medium=0,m5.large=1,gp2=10,az=1)
        AllowedValues:
            - Use Amazon OpenSearch Serverless
            - Development and Testing (t3.medium=0,m5.large=1,gp2=10,az=1)
            - Suitable for Production Workload (t3.medium=3,m5.large=2,gp2=20,az=2)
            - Recommended for Production Workload (t3.medium=3,m5.large=4,gp2=20,az=2)
            - Recommended for Large Production Workload (t3.medium=3,m5.large=6,gp2=40,az=3)
            - Disable Amazon OpenSearch Service
    # AI/ML Settings
    DefaultAIOptions:
        Type: String
        Description: Configure AI/ML settings
        Default: Recommended V4 features (v4.default)
        AllowedValues:
            - Recommended V4 features (v4.default)
            - Default (celeb,label,segment,transcribe,keyphrase,entity,textract)
            - All (celeb,face,facematch,label,moderation,text,segment,transcribe,keyphrase,entity,sentiment,textract)
            - Video analysis (celeb,face,facematch,label,moderation,text,segment)
            - Audio analysis (transcribe,keyphrase,entity)
            - Image analysis (celeb,face,facematch,label,moderation,text)
            - Document analysis (textract)
            - Celebrity recognition only (celeb)
            - Video segment detection only (segment)
            - Speech to text only (transcribe)
            - Others - Celebrity and face matching (celeb,facematch)
    # SNS / Cognito parameters
    Email:
        Type: String
        Description: Email address of the user that will be created in the Amazon Cognito Identity Pool and subscribed to the Amazon SNS topic. Subscribed users will receive ingest, publishing, and error notifications. After launch, two emails will be sent to this address; one with instructions for logging in to the web interface and one confirming the SNS subscription.
        # Formats: Email address or Username:Password
        AllowedPattern: '([^\s@:]+@[^\s@:]+\.[^\s@:]+)|([^\s@:]+:[^\s@:]+)'
    # CloudFront / Website
    PriceClass:
        Type: String
        Description: Specify the price class of the edge location from which CloudFront serves your requests. For more information, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html
        AllowedValues:
            - Use Only U.S., Canada and Europe (PriceClass_100)
            - Use U.S., Canada, Europe, Asia and Africa (PriceClass_200)
            - Use All Edge Locations [Best Performance] (PriceClass_All)
        Default: Use Only U.S., Canada and Europe (PriceClass_100)
    # S3 Ingest Bucket
    StartOnObjectCreation:
        Type: String
        Description: Start workflow when directly upload assets to ingest S3 bucket
        Default: "YES"
        AllowedValues:
            - "NO"
            - "YES"
    # Amazon Neptune Knowledge Graph (Optional)
    EnableKnowledgeGraph:
        Type: String
        Description: Enable knowledge graph to visualize how the relationships of your assets in your library. The knowledge graph feature create additional resources such as Amazon Neptune Serverless, Amazon VPC, AWS PrivateLink, additional AWS API Gateway endpoint and AWS Step Functions and will incur additional cost to the workflow.
        Default: "NO"
        AllowedValues:
            - "NO"
            - "YES"
    CidrBlock:
        Type: String
        Description: Specify CIDR block of an Amazon VPC where the Amazon Neptune Serverless db cluster of the knowledge graph will run on.
        Default: 172.31.0.0/16
    # Amazon Bedrock secondary region access
    BedrockSecondaryRegionAccess:
        Type: String
        Description: If Amazon Bedrock service is not available in your current AWS region, you can select a nearby region to try out the Generative AI feature. You would also need to grant model access for Anthropic Claude 3 models through Amazon Bedrock console, Model access page.
        Default: North Virginia [US East] (us-east-1)
        AllowedValues:
            - North Virginia [US East] (us-east-1)
            - Oregon [US West] (us-west-2)
            - Paris [Europe] (eu-west-3)
            - Sydney [Asia Pacific] (ap-southeast-2)
            - No, do not enable Amazon Bedrock
            # - Frankfurt [Europe] (eu-central-1)
            # - Tokyo [Asia Pacific] (ap-northeast-1)
            # - Singapore [Asia Pacific] (ap-southeast-1)
    # Bedrock models
    BedrockModel:
        Type: String
        Description: Select a foundation model of Amazon Bedrock to use. Make sure you have granted model access to use these models through Amazon Bedrock console, Model access page.
        Default: Anthropic Claude 3 Haiku
        AllowedValues:
            - Anthropic Claude 3 Haiku
            - Anthropic Claude 3 Sonnet
    # Version compatibility statement
    VersionCompatibilityStatement:
        Type: String
        Description: The new Version 4 of Media2Cloud is not compatible with previous versions due to several optimization changes. These changes include the Amazon OpenSearch cluster indexes and consolidation of the generated metadata. While a migration tool is being developed to help customers migrate from previous versions to Version 4, this CloudFormation template SHOULD NOT be used to update your existing Media2Cloud V3 deployment to the latest version. Confirm that you have read and understand the version compatibility statement. If you are creating a new stack, select "Yes, I understand and proceed".
        AllowedValues:
            - Yes, I understand and proceed
            - No, do not proceed

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
            -
                Label:
                    default: PLEASE READ AND SELECT AN ANSWER
                Parameters:
                    - VersionCompatibilityStatement
            -
                Label:
                    default: Amazon Cognito / Amazon Simple Notification Service
                Parameters:
                    - Email
            -
                Label:
                    default: Amazon CloudFront
                Parameters:
                    - PriceClass
            -
                Label:
                    default: Amazon OpenSearch Service
                Parameters:
                    - OpenSearchCluster
            -
                Label:
                    default: AI/ML Default Settings
                Parameters:
                    - DefaultAIOptions
            -
                Label:
                    default: (OPTIONAL) Advanced Customerization
                Parameters:
                    - UserDefinedIngestBucket
                    - StartOnObjectCreation
            -
                Label:
                    default: (EXPERIMENTAL FEATURE) Knowledge Graph with Amazon Neptune Serverless
                Parameters:
                    - EnableKnowledgeGraph
                    - CidrBlock
            -
                Label:
                    default: (EXPERIMENTAL FEATURE) Generative AI with Amazon Bedrock service
                Parameters:
                    - BedrockSecondaryRegionAccess
                    - BedrockModel
        ParameterLabels:
            VersionCompatibilityStatement:
                default: Version compatibility
            Email:
                default: Email
            PriceClass:
                default: Price Class
            OpenSearchCluster:
                default: OpenSearch Cluster
            DefaultAIOptions:
                default: Analysis Feature(s)
            UserDefinedIngestBucket:
                default: User defined Amazon S3 Bucket for ingest
            StartOnObjectCreation:
                default: Allow autostart on ingest S3 bucket
            EnableKnowledgeGraph:
                default: Enable Knowledge Graph
            CidrBlock:
                default: VPC CIDR Settings
            BedrockSecondaryRegionAccess:
                default: Allow access to Amazon Bedrock service in a different region.
            BedrockModel:
                default: Foundation Model (Text & Vision)

Conditions:
    # Using email address for Cognito User Pool
    bEmail: !Not
        - !Equals
            - !Select
                - 0
                - !Split
                    - "@"
                    - !Ref Email
            - !Ref Email
    # Using Username and Temporary Code for Cognito User Pool
    bUseTemporaryCode: !Not
        - !Equals
            - !Select
                - 0
                - !Split
                    - ":"
                    - !Ref Email
            - !Ref Email
    bSingleRegion: !Equals
        - !FindInMap
            - Solution
            - Template
            - SingleRegion
        - "true"
    bDisableOpenSearch: !Equals
        - !Ref OpenSearchCluster
        - Disable Amazon OpenSearch Service
    bOpenSearchServerless: !Equals
        - !Ref OpenSearchCluster
        - Use Amazon OpenSearch Serverless
    bOpenSearchCluster: !And
        - !Not
            - !Condition bDisableOpenSearch
        - !Not
            - !Condition bOpenSearchServerless
    bEnableKnowledgeGraph: !Equals
        - !Ref EnableKnowledgeGraph
        - "YES"
    bBedrockSecondaryRegionAccess: !Not
        - !Equals
            - !Ref BedrockSecondaryRegionAccess
            - "No, do not enable Amazon Bedrock"
    bAnthropicClaude3Sonnet: !Equals
        - !Ref BedrockModel
        - Anthropic Claude 3 Sonnet
    bEnableShoppable: !Equals
        - !FindInMap
            - Workflow
            - ShoppableStack
            - Enable
        - "YES"

Resources:
    ################################################################################
    #
    # Custom Resources
    #
    ################################################################################
    CustomResourcesLogGroup:
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W84
                        reason: Use default encryption. Disable additional KMS encryption requirement. https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub
                - /aws/lambda/${solutionId}-${stackId}-${name}
                -
                    solutionId: !FindInMap
                        - Solution
                        - Project
                        - LowerCaseId
                    stackId: !Select
                        - 4
                        - !Split
                            - "-"
                            - !Select
                                - 2
                                - !Split
                                    - "/"
                                    - !Ref AWS::StackId
                    name: !FindInMap
                        - Workflow
                        - CustomResources
                        - Name
            RetentionInDays: 7

    CustomResourcesRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -
                        Effect: Allow
                        Action: sts:AssumeRole
                        Principal:
                            Service: lambda.amazonaws.com
            Path: !Sub
                - /${solutionId}-${stackId}/
                -
                    solutionId: !FindInMap
                        - Solution
                        - Project
                        - LowerCaseId
                    stackId: !Select
                        - 4
                        - !Split
                            - "-"
                            - !Select
                                - 2
                                - !Split
                                    - "/"
                                    - !Ref AWS::StackId
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
            Policies:
                -
                    PolicyName: !Sub
                        - "${solutionId}-custom-resources"
                        - solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                    PolicyDocument:
                        Version: "2012-10-17"
                        Statement:
                            ## CloudWatch Logs
                            -
                                Effect: Allow
                                Action:
                                    - logs:CreateLogGroup
                                    - logs:CreateLogStream
                                    - logs:PutLogEvents
                                Resource: !GetAtt CustomResourcesLogGroup.Arn

    CustomResourcesLambda:
        Type: AWS::Lambda::Function
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W89
                        reason: Workflow not using VPC
                    -
                        id: W92
                        reason: Workflow not limiting simultaneous executions
        Properties:
            FunctionName: !Sub
                - ${solutionId}-${stackId}-${name}
                -
                    solutionId: !FindInMap
                        - Solution
                        - Project
                        - LowerCaseId
                    stackId: !Select
                        - 4
                        - !Split
                            - "-"
                            - !Select
                                - 2
                                - !Split
                                    - "/"
                                    - !Ref AWS::StackId
                    name: !FindInMap
                        - Workflow
                        - CustomResources
                        - Name
            Description: !Sub
                - (${solutionId}) custom resources
                - solutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
            Runtime: !FindInMap
                - Node
                - Runtime
                - Version
            MemorySize: 256
            Timeout: 900
            Handler: index.handler
            Role: !GetAtt CustomResourcesRole.Arn
            Code:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub "-${AWS::Region}"
                S3Key: !Sub
                    - ${keyprefix}/${package}
                    -
                        keyprefix: !FindInMap
                            - Solution
                            - Template
                            - KeyPrefix
                        package: !FindInMap
                            - Workflow
                            - CustomResources
                            - Package
            TracingConfig:
                Mode: Active
            Environment:
                Variables:
                    ENV_EXPECTED_BUCKET_OWNER: !Ref AWS::AccountId
                    ENV_CUSTOM_USER_AGENT: !FindInMap
                        - Solution
                        - Project
                        - CustomUserAgent
            Tags:
                -
                    Key: SolutionId
                    Value: !FindInMap
                        - Solution
                        - Project
                        - Id

    ################################################################################
    #
    # Version Compatibility
    #
    ################################################################################
    CheckVersionCompatibilityStatement:
        Type: Custom::CheckVersionCompatibilityStatement
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                VersionCompatibilityStatement: !Ref VersionCompatibilityStatement

    ################################################################################
    #
    # Core stack
    # * create the core resources shared among other stacks such as:
    #   Buckets, Lambda Layers, IoT, etc
    #
    ################################################################################
    CoreStack:
        Type: AWS::CloudFormation::Stack
        DependsOn:
            - CheckVersionCompatibilityStatement
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - Core
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                CustomResourcesLambdaArn: !GetAtt CustomResourcesLambda.Arn
                CustomResourcesRoleName: !Ref CustomResourcesRole
                CustomResourcesRoleArn: !GetAtt CustomResourcesRole.Arn
                UserDefinedIngestBucket: !Ref UserDefinedIngestBucket
                OpenSearchDedicatedMaster: !If
                    - bOpenSearchCluster
                    - !Select
                        - 0
                        - !Split
                            - ","
                            - !Select
                                - 0
                                - !Split
                                    - ")"
                                    - !Select
                                        - 1
                                        - !Split
                                            - "("
                                            - !Ref OpenSearchCluster
                    - skip=1
                OpenSearchInstance: !If
                    - bOpenSearchCluster
                    - !Select
                        - 1
                        - !Split
                            - ","
                            - !Select
                                - 0
                                - !Split
                                    - ")"
                                    - !Select
                                        - 1
                                        - !Split
                                            - "("
                                            - !Ref OpenSearchCluster
                    - skip=1
                OpenSearchVolume: !If
                    - bOpenSearchCluster
                    - !Select
                        - 2
                        - !Split
                            - ","
                            - !Select
                                - 0
                                - !Split
                                    - ")"
                                    - !Select
                                        - 1
                                        - !Split
                                            - "("
                                            - !Ref OpenSearchCluster
                    - skip=1
                OpenSearchAvailabilityZone: !If
                    - bOpenSearchCluster
                    - !Select
                        - 3
                        - !Split
                            - ","
                            - !Select
                                - 0
                                - !Split
                                    - ")"
                                    - !Select
                                        - 1
                                        - !Split
                                            - "("
                                            - !Ref OpenSearchCluster
                    - skip=1
                OpenSearchServerless: !If
                    - bOpenSearchServerless
                    - true
                    - false
                PriceClass: !Select
                    - 0
                    - !Split
                        - ")"
                        - !Select
                            - 1
                            - !Split
                                - "("
                                - !Ref PriceClass

    ################################################################################
    #
    # WebApp stack
    # * create the core resources shared among other stacks such as:
    #   Buckets, Lambda Layers, IoT, etc
    #
    ################################################################################
    WebAppStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - WebApp
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                AnonymousUsage: !FindInMap
                    - Send
                    - AnonymousUsage
                    - Data
                CustomResourcesLambdaArn: !GetAtt CustomResourcesLambda.Arn
                CustomResourcesRoleName: !Ref CustomResourcesRole
                AwsSdkLayer: !GetAtt CoreStack.Outputs.AwsSdkLayer
                CoreLibLayer: !GetAtt CoreStack.Outputs.CoreLibLayer
                TokenizerLayer: !GetAtt CoreStack.Outputs.TokenizerLayer
                SolutionUuid: !GetAtt CoreStack.Outputs.SolutionUuid
                IotHost: !GetAtt CoreStack.Outputs.IotHost
                IotTopic: !GetAtt CoreStack.Outputs.IotTopic
                IotThingPolicy: !GetAtt CoreStack.Outputs.IotThingPolicy
                IngestBucket: !GetAtt CoreStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt CoreStack.Outputs.ProxyBucket
                WebBucket: !GetAtt CoreStack.Outputs.WebBucket
                CloudFrontDistributionId: !GetAtt CoreStack.Outputs.CloudFrontDistributionId
                CloudFrontDistributionDomainName: !GetAtt CoreStack.Outputs.CloudFrontDistributionDomainName
                OpenSearchDomainName: !GetAtt CoreStack.Outputs.OpenSearchDomainName
                OpenSearchDomainEndpoint: !GetAtt CoreStack.Outputs.OpenSearchDomainEndpoint
                OpenSearchCollection: !GetAtt CoreStack.Outputs.OpenSearchCollection
                DefaultAIOptions: !Select
                    - 0
                    - !Split
                        - ")"
                        - !Select
                            - 1
                            - !Split
                                - "("
                                - !Ref DefaultAIOptions
                DefaultMinConfidence: !FindInMap
                    - AIML
                    - Options
                    - DefaultMinConfidence
                AIOptionsS3Key: !FindInMap
                    - AIML
                    - Options
                    - S3Key
                BedrockSecondaryRegionAccess: !If
                    - bBedrockSecondaryRegionAccess
                    - !Select
                        - 0
                        - !Split
                            - ")"
                            - !Select
                                - 1
                                - !Split
                                    - "("
                                    - !Ref BedrockSecondaryRegionAccess
                    - ""
                BedrockModelName: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - Name
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - Name
                BedrockModelId: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - ModelId
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - ModelId
                BedrockModelVersion: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - ModelVersion
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - ModelVersion

    ################################################################################
    #
    # Backend stack
    #
    ################################################################################
    BackendStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - Backend
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                AnonymousUsage: !FindInMap
                    - Send
                    - AnonymousUsage
                    - Data
                CustomResourcesLambdaArn: !GetAtt CustomResourcesLambda.Arn
                CustomResourcesRoleName: !Ref CustomResourcesRole
                AwsSdkLayer: !GetAtt CoreStack.Outputs.AwsSdkLayer
                CoreLibLayer: !GetAtt CoreStack.Outputs.CoreLibLayer
                TokenizerLayer: !GetAtt CoreStack.Outputs.TokenizerLayer
                SolutionUuid: !GetAtt CoreStack.Outputs.SolutionUuid
                IotHost: !GetAtt CoreStack.Outputs.IotHost
                IotTopic: !GetAtt CoreStack.Outputs.IotTopic
                #IotThingPolicy: !GetAtt CoreStack.Outputs.IotThingPolicy
                IngestBucket: !GetAtt CoreStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt CoreStack.Outputs.ProxyBucket
                #WebBucket: !GetAtt CoreStack.Outputs.WebBucket
                #CloudFrontDistributionId: !GetAtt CoreStack.Outputs.CloudFrontDistributionId
                OpenSearchDomainName: !GetAtt CoreStack.Outputs.OpenSearchDomainName
                OpenSearchDomainEndpoint: !GetAtt CoreStack.Outputs.OpenSearchDomainEndpoint
                OpenSearchCollection: !GetAtt CoreStack.Outputs.OpenSearchCollection
                DefaultAIOptions: !Select
                    - 0
                    - !Split
                        - ")"
                        - !Select
                            - 1
                            - !Split
                                - "("
                                - !Ref DefaultAIOptions
                DefaultMinConfidence: !FindInMap
                    - AIML
                    - Options
                    - DefaultMinConfidence
                MediaConvertEndpoint: !GetAtt CoreStack.Outputs.MediaConvertEndpoint
                StartOnObjectCreation: !Ref StartOnObjectCreation
                AIOptionsS3Key: !FindInMap
                    - AIML
                    - Options
                    - S3Key
                # Media2Cloud Workflow events
                UnifiedStateMachineStatusBusName: !GetAtt CoreStack.Outputs.UnifiedStateMachineStatusBusName
                ZeroshotClassifierImageUri: !GetAtt CodeBuildStack.Outputs.ZeroshotClassifierImageUri
                FaissImageUri: !GetAtt CodeBuildStack.Outputs.FaissImageUri
                BedrockSecondaryRegionAccess: !If
                    - bBedrockSecondaryRegionAccess
                    - !Select
                        - 0
                        - !Split
                            - ")"
                            - !Select
                                - 1
                                - !Split
                                    - "("
                                    - !Ref BedrockSecondaryRegionAccess
                    - ""
                BedrockModelName: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - Name
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - Name
                BedrockModelId: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - ModelId
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - ModelId
                BedrockModelVersion: !If
                    - bAnthropicClaude3Sonnet
                    - !FindInMap
                        - AnthropicClaude
                        - Sonnet
                        - ModelVersion
                    - !FindInMap
                        - AnthropicClaude
                        - Haiku
                        - ModelVersion
                FaceApiImageUri: !GetAtt CodeBuildStack.Outputs.FaceApiImageUri

    ################################################################################
    #
    # CodeBuild stack
    # * Run codebuild to build and publish docker images if necessary
    #
    ################################################################################
    CodeBuildStack:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - CodeBuild
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                # Faiss
                FaissRepositoryName: !GetAtt ECRDescribeImages.FaissRepositoryName
                FaissImageTag: !GetAtt ECRDescribeImages.FaissImageTag
                FaissImageUri: !GetAtt ECRDescribeImages.FaissImageUri
                # Shoppable
                ShoppableRepositoryName: !GetAtt ECRDescribeImages.ShoppableRepositoryName
                ShoppableImageTag: !GetAtt ECRDescribeImages.ShoppableImageTag
                ShoppableImageUri: !GetAtt ECRDescribeImages.ShoppableImageUri
                # ZeroshotClassifier
                ZeroshotClassifierRepositoryName: !GetAtt ECRDescribeImages.ZeroshotClassifierRepositoryName
                ZeroshotClassifierImageTag: !GetAtt ECRDescribeImages.ZeroshotClassifierImageTag
                ZeroshotClassifierImageUri: !GetAtt ECRDescribeImages.ZeroshotClassifierImageUri
                # ZeroshotObject
                ZeroshotObjectRepositoryName: !GetAtt ECRDescribeImages.ZeroshotObjectRepositoryName
                ZeroshotObjectImageTag: !GetAtt ECRDescribeImages.ZeroshotObjectImageTag
                ZeroshotObjectImageUri: !GetAtt ECRDescribeImages.ZeroshotObjectImageUri
                # FaceApi
                FaceApiRepositoryName: !GetAtt ECRDescribeImages.FaceApiRepositoryName
                FaceApiImageTag: !GetAtt ECRDescribeImages.FaceApiImageTag
                FaceApiImageUri: !GetAtt ECRDescribeImages.FaceApiImageUri

    ################################################################################
    # Custom::ECRDescribeImages
    # Returns:
    # * XXXRepositoryName
    # * XXXImageTag
    # * XXXImageUri (empty string if image not exist)
    # * XXXImageDigest (empty string if image not exist)
    CustomResourcesRoleECR:
        Type: AWS::IAM::Policy
        DependsOn:
            - CheckVersionCompatibilityStatement
        Properties:
            Roles:
                - !Ref CustomResourcesRole
            PolicyName: AllowDescribeImagesECR
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    # ECR
                    -
                        Effect: Allow
                        Action: ecr:DescribeImages
                        Resource:
                            - !Sub
                                - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}
                                -
                                    repo: !FindInMap
                                        - DockerImage
                                        - Faiss
                                        - Repo
                            - !Sub
                                - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}
                                -
                                    repo: !FindInMap
                                        - DockerImage
                                        - Shoppable
                                        - Repo
                            - !Sub
                                - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}
                                -
                                    repo: !FindInMap
                                        - DockerImage
                                        - ZeroshotClassifier
                                        - Repo
                            - !Sub
                                - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}
                                -
                                    repo: !FindInMap
                                        - DockerImage
                                        - ZeroshotObject
                                        - Repo
                            - !Sub
                                - arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${repo}
                                -
                                    repo: !FindInMap
                                        - DockerImage
                                        - FaceApi
                                        - Repo

    ECRDescribeImages:
        DependsOn: CustomResourcesRoleECR
        Type: Custom::ECRDescribeImages
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                Faiss:
                    registryId: !Ref AWS::AccountId
                    repositoryName: !FindInMap
                        - DockerImage
                        - Faiss
                        - Repo
                    imageIds:
                        - imageTag: !FindInMap
                            - DockerImage
                            - Faiss
                            - Version
                Shoppable:
                    registryId: !Ref AWS::AccountId
                    repositoryName: !FindInMap
                        - DockerImage
                        - Shoppable
                        - Repo
                    imageIds:
                        - imageTag: !FindInMap
                            - DockerImage
                            - Shoppable
                            - Version
                ZeroshotClassifier:
                    registryId: !Ref AWS::AccountId
                    repositoryName: !FindInMap
                        - DockerImage
                        - ZeroshotClassifier
                        - Repo
                    imageIds:
                        - imageTag: !FindInMap
                            - DockerImage
                            - ZeroshotClassifier
                            - Version
                ZeroshotObject:
                    registryId: !Ref AWS::AccountId
                    repositoryName: !FindInMap
                        - DockerImage
                        - ZeroshotObject
                        - Repo
                    imageIds:
                        - imageTag: !FindInMap
                            - DockerImage
                            - ZeroshotObject
                            - Version
                FaceApi:
                    registryId: !Ref AWS::AccountId
                    repositoryName: !FindInMap
                        - DockerImage
                        - FaceApi
                        - Repo
                    imageIds:
                        - imageTag: !FindInMap
                            - DockerImage
                            - FaceApi
                            - Version

    ################################################################################
    #
    # PostProcess
    # * Attach Backend resources to ApiRole once stack is created
    # * Attach Shoppable resources to ApiRole
    # * Create solution manifest
    # * Register cognito user
    # * Subscribe to SNS topic
    # * Send metrics
    #
    ################################################################################
    ApiRolePolicyBackend:
        Type: AWS::IAM::Policy
        Metadata:
            cfn_nag:
                rules_to_suppress:
                    -
                        id: W76
                        reason: Suppress SPCM warning to have fine grained permission
        Properties:
            Roles:
                - !GetAtt WebAppStack.Outputs.ApiRole
            PolicyName: ApiAccessBackendResources
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    # Step Functions
                    -
                        Effect: Allow
                        Action:
                            - states:DescribeStateMachine
                            - states:StartExecution
                        Resource:
                            - !GetAtt BackendStack.Outputs.MainStateMachine
                            - !GetAtt BackendStack.Outputs.IngestMainStateMachine
                            - !GetAtt BackendStack.Outputs.AnalysisMainStateMachine
                            - !GetAtt BackendStack.Outputs.AssetRemovalStateMachine
                            - !GetAtt BackendStack.Outputs.UpdateFaceIndexerStateMachine
                    -
                        Effect: Allow
                        Action:
                            - states:DescribeExecution
                            - states:StopExecution
                        Resource:
                            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${BackendStack.Outputs.MainStateMachineName}:*
                            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${BackendStack.Outputs.IngestMainStateMachineName}:*
                            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${BackendStack.Outputs.AnalysisMainStateMachineName}:*
                            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${BackendStack.Outputs.AssetRemovalStateMachineName}:*
                            - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${BackendStack.Outputs.UpdateFaceIndexerStateMachineName}:*
                    # DynamoDB - read/write/delete from ingest and analysis tables
                    -
                        Effect: Allow
                        Action:
                            - dynamodb:Query
                            - dynamodb:Scan
                            - dynamodb:UpdateItem
                            - dynamodb:DeleteItem
                            - dynamodb:BatchGetItem
                            - dynamodb:BatchWriteItem
                        Resource:
                            - !GetAtt BackendStack.Outputs.AnalysisTableArn
                            - !GetAtt BackendStack.Outputs.IngestTableArn
                            - !GetAtt BackendStack.Outputs.FaceIndexerTableArn
                    # DynamoDB - read from ingest indices
                    -
                        Effect: Allow
                        Action:
                            - dynamodb:Query
                            - dynamodb:Scan
                        Resource:
                            - !Sub ${BackendStack.Outputs.IngestTableArn}/index/*
                            - !Sub ${BackendStack.Outputs.FaceIndexerTableArn}/index/*

    # Allow API to access Shoppable db table
    ApiRolePolicyShoppable:
        Condition: bEnableShoppable
        Type: AWS::IAM::Policy
        Properties:
            Roles:
                - !GetAtt WebAppStack.Outputs.ApiRole
            PolicyName: ApiAccessShoppableResources
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    # DynamoDB - read/write/delete from ingest and analysis tables
                    -
                        Effect: Allow
                        Action:
                            - dynamodb:GetItem
                            - dynamodb:BatchGetItem
                            - dynamodb:Query
                        Resource: !GetAtt ShoppableStack.Outputs.ShoppableTableArn

    ################################################################################
    # CustomResourcesRoleMain
    CustomResourcesRoleMain:
        Type: AWS::IAM::Policy
        Properties:
            Roles:
                - !Ref CustomResourcesRole
            PolicyName: !Sub
                - ${solutionId}-${stackId}-custom-resources-main-stack
                -
                    solutionId: !FindInMap
                        - Solution
                        - Project
                        - LowerCaseId
                    stackId: !Select
                        - 4
                        - !Split
                            - "-"
                            - !Select
                                - 2
                                - !Split
                                    - "/"
                                    - !Ref AWS::StackId
            PolicyDocument:
                Version: "2012-10-17"
                Statement:
                    # S3 - create solution manifest
                    -
                        Effect: Allow
                        Action: s3:PutObject
                        Resource: !Sub arn:aws:s3:::${CoreStack.Outputs.WebBucket}/*
                    # Cognito - register user
                    -
                        Effect: Allow
                        Action: cognito-idp:AdminCreateUser
                        Resource: !GetAtt WebAppStack.Outputs.CognitoUserPoolArn
                    # SNS - subscribe user
                    -
                        Effect: Allow
                        Action: sns:Subscribe
                        Resource: !GetAtt BackendStack.Outputs.SNSTopicArn
                    # Rekognition - create face collection on behalf
                    -
                        Effect: Allow
                        Action:
                            - rekognition:DescribeCollection
                            - rekognition:CreateCollection
                        Resource: !Sub arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*

    CreateSolutionManifest:
        DependsOn: CustomResourcesRoleMain
        Type: Custom::CreateSolutionManifest
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                Region: !Ref AWS::Region
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                Version: !FindInMap
                    - Solution
                    - Project
                    - Version
                StackName: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                # Core stack
                Ingest:
                    Bucket: !GetAtt CoreStack.Outputs.IngestBucket
                Proxy:
                    Bucket: !GetAtt CoreStack.Outputs.ProxyBucket
                Web:
                    Bucket: !GetAtt CoreStack.Outputs.WebBucket
                S3:
                    UseAccelerateEndpoint: !GetAtt CoreStack.Outputs.UseAccelerateEndpoint
                    ExpectedBucketOwner: !Ref AWS::AccountId
                IotHost: !GetAtt CoreStack.Outputs.IotHost
                IotTopic: !GetAtt CoreStack.Outputs.IotTopic
                # Backend stack
                StateMachines:
                    Main: !GetAtt BackendStack.Outputs.MainStateMachineName
                    Ingest: !GetAtt BackendStack.Outputs.IngestMainStateMachineName
                    Analysis: !GetAtt BackendStack.Outputs.AnalysisMainStateMachineName
                    AssetRemoval: !GetAtt BackendStack.Outputs.AssetRemovalStateMachineName
                    UpdateFaceIndexer: !GetAtt BackendStack.Outputs.UpdateFaceIndexerStateMachineName
                AIML:
                    MinConfidence: !GetAtt BackendStack.Outputs.DefaultMinConfidence
                    Detections: !Split
                        - ","
                        - !GetAtt BackendStack.Outputs.DefaultAIOptions
                # WebApp stack
                ApiEndpoint: !GetAtt WebAppStack.Outputs.ApiEndpoint
                Cognito:
                    UserPoolId: !GetAtt WebAppStack.Outputs.CognitoUserPool
                    ClientId: !GetAtt WebAppStack.Outputs.CognitoAppClient
                    IdentityPoolId: !GetAtt WebAppStack.Outputs.CognitoIdentityPool
                    RedirectUri: !GetAtt WebAppStack.Outputs.HomePage
                    Group:
                        Viewer: !FindInMap
                            - Cognito
                            - Group
                            - Viewer
                        Creator: !FindInMap
                            - Cognito
                            - Group
                            - Creator
                        Admin: !FindInMap
                            - Cognito
                            - Group
                            - Admin
                LastUpdated: !GetAtt WebAppStack.Outputs.LastUpdated
                # (OPTIONAL) Knowledge Graph demo
                KnowledgeGraph:
                    Endpoint: !If
                        - bEnableKnowledgeGraph
                        - !GetAtt KnowledgeGraphStack.Outputs.ApiEndpoint
                        - ""
                    ApiKey: !If
                        - bEnableKnowledgeGraph
                        - !GetAtt KnowledgeGraphStack.Outputs.ApiKey
                        - ""
                FoundationModels: !GetAtt WebAppStack.Outputs.FoundationModels
                SearchEngineVersion: !GetAtt CoreStack.Outputs.OpenSearchEngineVersion
                # (OPTIONAL) Shoppable
                Shoppable:
                    Endpoint: !If
                        - bEnableShoppable
                        - !GetAtt ShoppableStack.Outputs.ApiEndpoint
                        - ""
                    ApiKey: !If
                        - bEnableShoppable
                        - !GetAtt ShoppableStack.Outputs.ApiKey
                        - ""

    CognitoRegisterUser:
        DependsOn: CreateSolutionManifest
        Type: Custom::RegisterUser
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                UserPoolId: !GetAtt WebAppStack.Outputs.CognitoUserPool
                Email: !If
                    - bEmail
                    - !Ref Email
                    - !Ref AWS::NoValue
                Username: !If
                    - bUseTemporaryCode
                    - !Select
                        - 0
                        - !Split
                            - ":"
                            - !Ref Email
                    - !If
                        - bEmail
                        - !Select
                            - 0
                            - !Split
                                - "@"
                                - !Ref Email
                        - !Ref AWS::NoValue
                TemporaryCode: !If
                    - bUseTemporaryCode
                    - !Select
                        - 1
                        - !Split
                            - ":"
                            - !Ref Email
                    - !Ref AWS::NoValue

    CognitoUserToGroup:
        Type: AWS::Cognito::UserPoolUserToGroupAttachment
        Properties:
            GroupName: !FindInMap
                - Cognito
                - Group
                - Admin
            Username: !GetAtt CognitoRegisterUser.Username
            UserPoolId: !GetAtt WebAppStack.Outputs.CognitoUserPool

    SubscribeSNSTopic:
        Condition: bEmail
        DependsOn: CognitoRegisterUser
        Type: Custom::EmailSubscribe
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                TopicArn: !GetAtt BackendStack.Outputs.SNSTopicArn
                EmailList: !Split
                    - ","
                    - !Ref Email

    SendConfig:
        Type: Custom::SendConfig
        Properties:
            ServiceToken: !GetAtt CustomResourcesLambda.Arn
            Data:
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                Version: !FindInMap
                    - Solution
                    - Project
                    - Version
                AnonymousUsage: !FindInMap
                    - Send
                    - AnonymousUsage
                    - Data
                OpenSearchCluster: !Ref OpenSearchCluster
                SolutionUuid: !GetAtt CoreStack.Outputs.SolutionUuid

    ################################################################################
    #
    # AppRegistry
    #
    ################################################################################
    Application:
        Type: AWS::ServiceCatalogAppRegistry::Application
        DependsOn:
            - CheckVersionCompatibilityStatement
        Properties:
            Description: !Sub
                - Service Catalog application to track and manage all your resources. The Solution ID is ${solutionId} and Solution Version is ${solutionVersion}.
                -
                    solutionId: !FindInMap
                        - Solution
                        - Project
                        - Id
                    solutionVersion: !FindInMap
                        - Solution
                        - Project
                        - Version
            Name: !Join
                - "-"
                -   - !FindInMap
                        - Solution
                        - Project
                        - AppRegistryApplicationName
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - !Ref AWS::StackName
            Tags: {
                "Solutions:SolutionID": !FindInMap [Solution, Project, Id],
                "Solutions:SolutionName": !FindInMap [Solution, Project, SolutionName],
                "Solutions:SolutionVersion": !FindInMap [Solution, Project, Version],
                "Solutions:ApplicationType": !FindInMap [Solution, Project, ApplicationType],
            }

    DefaultApplicationAttributes:
        Type: AWS::ServiceCatalogAppRegistry::AttributeGroup
        DependsOn:
            - CheckVersionCompatibilityStatement
        Properties:
            Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName"]]
            Description: Attribute group for solution information.
            Attributes: {
                "ApplicationType": !FindInMap [Solution, Project, ApplicationType],
                "Version": !FindInMap [Solution, Project, Version],
                "SolutionID": !FindInMap [Solution, Project, Id],
                "SolutionName": !FindInMap [Solution, Project, SolutionName],
            }

    AppRegistryApplicationAttributeAssociation:
        Type: AWS::ServiceCatalogAppRegistry::AttributeGroupAssociation
        Properties:
            Application: !GetAtt Application.Id
            AttributeGroup: !GetAtt DefaultApplicationAttributes.Id

    AppRegistryApplicationStackAssociation:
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref AWS::StackId
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationCoreStack:
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref CoreStack
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationWebAppStack:
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref WebAppStack
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationBackendStack:
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref BackendStack
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationGraphStack:
        Condition: bEnableKnowledgeGraph
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref KnowledgeGraphStack
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationShoppableStack:
        Condition: bEnableShoppable
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref ShoppableStack
            ResourceType: CFN_STACK

    AppRegistryApplicationStackAssociationCodeBuildStack:
        Type: AWS::ServiceCatalogAppRegistry::ResourceAssociation
        Properties:
            Application: !GetAtt Application.Id
            Resource: !Ref CodeBuildStack
            ResourceType: CFN_STACK

    ################################################################################
    #
    # (EXPERIMENTAL FEATURES)
    # * Knowledge Graph
    # * Shoppable Experience
    #
    ################################################################################
    KnowledgeGraphStack:
        Condition: bEnableKnowledgeGraph
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - Graph
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                CidrBlock: !Ref CidrBlock
                AwsSdkLayer: !GetAtt CoreStack.Outputs.AwsSdkLayer
                CoreLibLayer: !GetAtt CoreStack.Outputs.CoreLibLayer
                SolutionUuid: !GetAtt CoreStack.Outputs.SolutionUuid
                IngestBucket: !GetAtt CoreStack.Outputs.IngestBucket
                ProxyBucket: !GetAtt CoreStack.Outputs.ProxyBucket
                # Media2Cloud Workflow events
                UnifiedStateMachineStatusBusName: !GetAtt CoreStack.Outputs.UnifiedStateMachineStatusBusName

    ShoppableStack:
        Condition: bEnableShoppable
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub
                - http://${bucket}${region}.s3.amazonaws.com/${keyprefix}/${stackName}
                -
                    bucket: !FindInMap
                        - Solution
                        - Template
                        - S3Bucket
                    region: !If
                        - bSingleRegion
                        - ""
                        - !Sub -${AWS::Region}
                    keyprefix: !FindInMap
                        - Solution
                        - Template
                        - KeyPrefix
                    stackName: !FindInMap
                        - Solution
                        - Stack
                        - Shoppable
            Parameters:
                S3Bucket: !Sub
                    - ${bucket}${region}
                    -
                        bucket: !FindInMap
                            - Solution
                            - Template
                            - S3Bucket
                        region: !If
                            - bSingleRegion
                            - ""
                            - !Sub -${AWS::Region}
                KeyPrefix: !FindInMap
                    - Solution
                    - Template
                    - KeyPrefix
                SolutionId: !FindInMap
                    - Solution
                    - Project
                    - Id
                SolutionLowerCaseId: !FindInMap
                    - Solution
                    - Project
                    - LowerCaseId
                SolutionUuid: !GetAtt CoreStack.Outputs.SolutionUuid
                ResourcePrefix: !Sub
                    - ${solutionId}-${stackId}
                    -
                        solutionId: !FindInMap
                            - Solution
                            - Project
                            - LowerCaseId
                        stackId: !Select
                            - 4
                            - !Split
                                - "-"
                                - !Select
                                    - 2
                                    - !Split
                                        - "/"
                                        - !Ref AWS::StackId
                CustomUserAgent: !FindInMap
                    - Solution
                    - Project
                    - CustomUserAgent
                AwsSdkLayer: !GetAtt CoreStack.Outputs.AwsSdkLayer
                CoreLibLayer: !GetAtt CoreStack.Outputs.CoreLibLayer
                ProxyBucket: !GetAtt CoreStack.Outputs.ProxyBucket
                ShoppableImageUri: !GetAtt CodeBuildStack.Outputs.ShoppableImageUri
                # Media2Cloud Workflow events
                UnifiedStateMachineStatusBusName: !GetAtt CoreStack.Outputs.UnifiedStateMachineStatusBusName

Outputs:
    HomePage:
        Value: !GetAtt WebAppStack.Outputs.HomePage
        Description: HomePage
    ApiEndpoint:
        Value: !GetAtt WebAppStack.Outputs.ApiEndpoint
        Description: ApiEndpoint
